{"name":"Gofigure","body":"#gofigure\r\n\r\nGofigure is a configuration tool for node to help in the gathering and monitoring of configuration files in node. \r\n\r\n# Installation\r\n\r\n    npm install gofigure\r\n    \r\n#Usage\r\n\r\n   \r\n  * [Loading A Configuration](#load)        \r\n    * [Directories](#loadDir)         \r\n    * [Files](#loadFiles)\r\n  * [Monitoring Property Changes](#monitoring)\r\n    * [Monitoring All Files](#monitoringAll)   \r\n    * [Monitoring Certain Files](#monitoringSome)   \r\n    * [Property Topic Syntax](#monitoringSyntax)\r\n    * [Property Change Callback](#monitoringCB)\r\n  * [Environments](#environments)\r\n\r\n<a name=\"load\"></a>\r\n##Loading configurations\r\n\r\nGofigure currently handles the loading of JSON files for configurations. \r\n\r\nTo Get an instance of a configuration object use the `gofigure` method. The `gofigure` method takes an object that accepts the following options\r\n\r\n  * [locations](#loadDir)  : an array of directories that contain your configurations.\r\n  * [files](#loadFiles)  : an array of files that contain your configurations.        \r\n  * [monitor](#monitoring) : set to true to monitor changes to configuration files.\r\n  * `ignoreMissing` : By default `gofigure` will ignore missing directories. Set this to false to precent the ignoring of missing configuration directories.\r\n  * [environment](#environments) : By default will look for `process.env.NODE_ENV` if this is not set then gofigure will read all properties. If you wish to explicity set the environment then set this property.\r\n\r\n```javascript \r\n\r\nvar gofigure = require(\"gofigure\");\r\n\r\n//Loader for directory of configurations\r\nvar dirLoader = gofigure({\r\n  locations : [__dirname + \"/configs\"]\r\n});\r\n\r\n\r\n//Loader for files of configurations\r\nvar dirLoader = gofigure({\r\n  files : [process.env.HOME + \"/configs/config1.json\", __dirname + \"/config1.json\"]\r\n});\r\n\r\n\r\n```\r\n\r\nYou can load configurations asynchronously\r\n\r\n```javascript\r\nloader.load(function(err, config){\r\n    var PORT = config.port, HOST = config.host;\r\n});\r\n```\r\n\r\nor synchronously\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({locations : [__dirname + \"/configs\"]});\r\nvar config = loader.loadSync();\r\n```\r\n\r\n<a name=\"loadDir\"></a>\r\n###Directories of configurations\r\nTo load directories that contain configuration files in the options object provide locations property that is an array of directories than contain your configurations.\r\n\r\n```javascript\r\n\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({locations : [__dirname + \"/configs\"]});\r\nloader.load(function(err, config){\r\n    var PORT = config.port, HOST = config.host;\r\n});\r\n```\r\n\r\nThe order of the locations matter as it defines a precedence for files. For example suppose you have a directory of default configuration files, and on production you want to override those configuration with environment specific configurations with out changing your module or source controlled files.\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({locations : [\"/prod/configs\", __dirname + \"/configs\"]});\r\nloader.load(function(err, config){\r\n    var PORT = config.port, HOST = config.host;\r\n});\r\n```\r\n\r\nHere any production configuration files found in `/prod/configs` will override the properties in `__dirname + \"/configs\"`.\r\n\r\nAnother use case might be in development where you have default properties and instead of altering the source controlled files the developer can override them by putting them in their home directory.\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\nvar HOME = process.env.HOME;\r\n\r\nvar loader = gofigure({locations : [ HOME + \"/yourApp/configs\", __dirname + \"/configs\"]});\r\nloader.load(function(err, config){\r\n    var PORT = config.port, HOST = config.host;\r\n});\r\n```\r\n\r\n<a name=\"loadFiles\"></a>\r\n###Files\r\n\r\nYou may also load specific files rather than entire directories.\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({files : [\"/prod/configs/config1.json\", __dirname + \"/config.json\"]});\r\nloader.load(function(err, config){\r\n    var PORT = config.port, HOST = config.host;\r\n});\r\n```\r\n\r\nAgain order matters `/prod/configs/config1.json` will override `__dirname + \"/config.json\"`\r\n\r\n<a name=\"monitoring\"></a>\r\n##Monitoring\r\n\r\nGofigure supports the monitoring of changes to configuration files. \r\n\r\n<a name=\"monitoringAll\"></a>\r\n###All files\r\n\r\nTo enable monitoring you can specify monitor to true in the options.\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({monitor : true, files : [\"/prod/configs/config1.json\", __dirname + \"/config.json\"]});\r\nvar config = loader.loadSync();\r\n\r\nloading.on(\"my.cool.property\", function(newValue){\r\n  //...do something\r\n});\r\n```\r\n<a name=\"monitoringSome\"></a>\r\n###Individual Files\r\n\r\nTo monitor certain files you can use the files property and with object that have a `monitor : true` KV pair.\r\n\r\n```javascript\r\nvar gofigure = require(\"gofigure\");\r\n\r\nvar loader = gofigure({files : [\r\n  { \r\n    file : \"/prod/configs/config1.json\", \r\n    monitor : true\r\n    \r\n  }, \r\n  __dirname + \"/config.json\"\r\n]});\r\nvar config = loader.loadSync();\r\n\r\nloading.on(\"my.cool.property\", function(newValue){\r\n  //...do something\r\n});\r\n```\r\nJust `config1.json` will be monitored for changes.\r\n\r\n<a name=\"monitoringSyntax\"></a>\r\n###Property topic syntax\r\n\r\nTo listen to all properties\r\n\r\n```javascript\r\nloading.on(function(config){\r\n  //...do something\r\n});\r\n\r\nloading.on(function(nameOfPropertyChanged, config){\r\n  //...do something\r\n});\r\n\r\nloading.on(function(nameOfPropertyChanged, value, config){\r\n  //...do something\r\n});\r\n```\r\n\r\nTo listen to specific properties\r\n\r\n```javascript\r\nloading.on(\"my.cool.property\", function(newValue){\r\n  //...do something\r\n});\r\n\r\nloading.on(\"my.cool.property\", function(newValue, config){\r\n  //...do something\r\n});\r\n\r\nloading.on(\"my.cool.property\", function(nameOfPropertyChanged, value, config){\r\n  //...do something\r\n});\r\n```\r\n\r\nWild cards\r\n\r\n```javascript\r\n\r\n//listen to any property changed on the my.cool object\r\nloading.on(\"my.cool.*\", function(propName, newValue){\r\n  //...do something\r\n});\r\n\r\n\r\n//listen to the change of a property named 'property' on any object\r\n//that is a member of my\r\nloading.on(\"my.*.property\", function(propName, newValue){\r\n  //...do something\r\n});\r\n\r\n//listen to the change of a property named 'property' that is\r\n//a member of a property called cool\r\nloading.on(\"*.cool.property\", function(propName, newValue){\r\n  //...do something\r\n});\r\n\r\n//listen to the change of property or otherProperty on the my.cool object.\r\nloading.on(\"my.cool.{property|otherProperty}\", function(propName, newValue){\r\n  //...do something\r\n});\r\n\r\n//listen to the change of property or otherProperty on the my cool or \r\n//notCool object.\r\nloading.on(\"my.{cool|notCool}.{property|otherProperty}\", function(propName, newValue){\r\n  //...do something\r\n});\r\n```\r\n\r\n<a name=\"monitoringCB\"></a>\r\n###Callback Arguments\r\n\r\n\r\nThe property change callback will pass in the following values depending on the arity of the callback.\r\n\r\nIf 1 argument is expected then just the callback invoked with the new value is a.\r\n\r\n```javascript\r\n\r\nloading.on(\"my.cool.property\", function(newValue){\r\n  //...do something\r\n});\r\n\r\n\r\n```\r\n\r\nIf two arguments are expected then it is invoked with the property name and the new value.\r\n\r\n\r\n```javascript\r\n\r\nloading.on(\"my.cool.property\", function(propName, newValue){\r\n  //...do something\r\n});\r\n\r\n\r\n```\r\n\r\nOther wise the callback is invoked with the propertyName, newValue and the configuration object.\r\n\r\n```javascript\r\n\r\nloading.on(\"my.cool.property\", function(propName, newValue, configObject){\r\n  //...do something\r\n});\r\n\r\n\r\n```\r\n\r\n<a name=\"environments\"></a>\r\n##Environments\r\n\r\n`gofigure` also supports environments, by default it will look for `NODE_ENV` and if it is set then it will use it. \r\n\r\nThe following is an example configuration file\r\n\r\n```javascript\r\n\r\n{\r\n    \"development\": {\r\n        \"logging\":{\r\n  \t        \"patio\":{\r\n\t\t\t        \"level\":\"DEBUG\",\r\n\t\t\t        \"appenders\":[\r\n\t\t\t\t        {\r\n\t\t\t\t\t        \"type\":\"RollingFileAppender\",\r\n\t\t\t\t\t        \"file\":\"/var/log/myApp/patio.log\"\r\n\t\t\t\t        },\t\t\t\t\t\t\t\t\r\n\t\t\t\t        {\r\n\t\t\t\t\t        \"type\":\"ConsoleAppender\"\r\n\t\t\t\t        }\r\n\t\t\t        ]\r\n\t\t        }\r\n        },\r\n        \"app\" : {\r\n          \"host\" : \"localhost\",\r\n          \"port\" : \"8088\"\r\n        },\r\n        \"MYSQL_DB\" : \"mysql://test:testpass@localhost:3306/dev_db\",\r\n        \"MONGO_DB\" : \"mongodb://test:testpass@localhost:27017/dev_db\"\r\n    },\r\n    \"production\": {\r\n        \"logging\":{\r\n            \"patio\":{\r\n\t\t\t        \"level\":\"ERROR\",\r\n\t\t\t        \"appenders\":[\r\n\t\t\t\t        {\r\n\t\t\t\t\t        \"type\":\"RollingFileAppender\",\r\n\t\t\t\t\t        \"file\":\"/var/log/myApp/patio.log\"\r\n\t\t\t\t        }\r\n\t\t\t        ]\r\n\t\t        }\r\n        },\r\n        \"app\" : {\r\n          \"host\" : \"prod.mydomain.com\",\r\n          \"port\" : \"80\"\r\n        },\r\n        \"MYSQL_DB\" : \"mysql://test:testpass@prod.mydomain.com:3306/prod_db\",\r\n        \"MONGO_DB\" : \"mongodb://test:testpass@prod.mydomain.com:27017/prd_db\"        \r\n    },\r\n    \"test\": {\r\n        \"logging\":{\r\n            \"patio\":{\r\n\t\t\t        \"level\":\"INFO\",\r\n\t\t\t        \"appenders\":[\r\n\t\t\t\t        {\r\n\t\t\t\t\t        \"type\":\"RollingFileAppender\",\r\n\t\t\t\t\t        \"file\":\"/var/log/myApp/patio.log\"\r\n\t\t\t\t        }\t\t\t\t\t\t\t\t\t\t\t\t        \r\n\t\t\t        ]\r\n\t\t        }\r\n        },\r\n        \"app\" : {\r\n          \"host\" : \"test.mydomain.com\",\r\n          \"port\" : \"80\"\r\n        },\r\n        \"MYSQL_DB\" : \"mysql://test:testpass@test.mydomain.com:3306/test_db\",\r\n        \"MONGO_DB\" : \"mongodb://test:testpass@test.mydomain.com:27017/test_db\"        \r\n    }\r\n}\r\n\r\n```\r\n\r\nTo load just the development properties set the `environment` to development.\r\n\r\n```javascript\r\n\r\nvar gofigure = require(\"gofigure\"),\r\n    patio = require(\"patio\"),\r\n    mongoose = require(\"mongoose\"),\r\n    comb = require(\"comb\"),\r\n    DB, HOST, PORT;\r\n\r\n\r\nvar loader = gofigure({\r\n  files : [__dirname + \"/config-env.json\"],\r\n  environment : \"development\"\r\n})\r\n  .on(\"MYSQL_DB\", function(uri){\r\n    patio.connect(uri);\r\n  })\r\n  .on(\"MONGO_DB\", function(uri){\r\n    mongoose.connect(uri);\r\n  })\r\n  .on(\"logging\", function(logging){\r\n    new comb.logging.PropertyConfigurator().configure(logging);\r\n    patio.configureLogging(logging);\r\n  })\r\n  .on(\"app\", function(app){\r\n    //...\r\n  })\r\n  .load(function(){\r\n    //do something\r\n  })\r\n\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nMIT <https://github.com/Pollenware/gofigure/raw/master/LICENSE>\r\n\r\nMeta\r\n----\r\n\r\n* Code: `git clone git://github.com/pollenware/gofigure.git`\r\n* Website:  <http://pollenware.com> - Twitter: <http://twitter.com/pollenware> - 877.465.4045\r\n\r\n\r\n\r\n\r\n","tagline":"Configuration library for node.js","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}